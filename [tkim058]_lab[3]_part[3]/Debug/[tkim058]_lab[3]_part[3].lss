
[tkim058]_lab[3]_part[3].elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000053a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004c6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  0000053a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000053a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000056c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000005ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000922  00000000  00000000  000005e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007f7  00000000  00000000  00000f06  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004f5  00000000  00000000  000016fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000094  00000000  00000000  00001bf4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000045f  00000000  00000000  00001c88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000106  00000000  00000000  000020e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  000021ed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a4 30       	cpi	r26, 0x04	; 4
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	d7 d1       	rcall	.+942    	; 0x458 <main>
  aa:	0b c2       	rjmp	.+1046   	; 0x4c2 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <SetBit>:
unsigned char tmpC = 0x00;
unsigned char A = 0x00;

// Bit-access function

unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  b2:	00 d0       	rcall	.+0      	; 0xb4 <SetBit+0x6>
  b4:	1f 92       	push	r1
  b6:	cd b7       	in	r28, 0x3d	; 61
  b8:	de b7       	in	r29, 0x3e	; 62
  ba:	89 83       	std	Y+1, r24	; 0x01
  bc:	6a 83       	std	Y+2, r22	; 0x02
  be:	4b 83       	std	Y+3, r20	; 0x03

	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
  c0:	8b 81       	ldd	r24, Y+3	; 0x03
  c2:	88 23       	and	r24, r24
  c4:	71 f0       	breq	.+28     	; 0xe2 <SetBit+0x34>
  c6:	8a 81       	ldd	r24, Y+2	; 0x02
  c8:	28 2f       	mov	r18, r24
  ca:	30 e0       	ldi	r19, 0x00	; 0
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <SetBit+0x28>
  d2:	88 0f       	add	r24, r24
  d4:	99 1f       	adc	r25, r25
  d6:	2a 95       	dec	r18
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <SetBit+0x24>
  da:	98 2f       	mov	r25, r24
  dc:	89 81       	ldd	r24, Y+1	; 0x01
  de:	89 2b       	or	r24, r25
  e0:	0e c0       	rjmp	.+28     	; 0xfe <SetBit+0x50>
  e2:	8a 81       	ldd	r24, Y+2	; 0x02
  e4:	28 2f       	mov	r18, r24
  e6:	30 e0       	ldi	r19, 0x00	; 0
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <SetBit+0x44>
  ee:	88 0f       	add	r24, r24
  f0:	99 1f       	adc	r25, r25
  f2:	2a 95       	dec	r18
  f4:	e2 f7       	brpl	.-8      	; 0xee <SetBit+0x40>
  f6:	98 2f       	mov	r25, r24
  f8:	90 95       	com	r25
  fa:	89 81       	ldd	r24, Y+1	; 0x01
  fc:	89 23       	and	r24, r25

}
  fe:	0f 90       	pop	r0
 100:	0f 90       	pop	r0
 102:	0f 90       	pop	r0
 104:	df 91       	pop	r29
 106:	cf 91       	pop	r28
 108:	08 95       	ret

0000010a <GetBit>:

unsigned char GetBit(unsigned char x, unsigned char k) {
 10a:	cf 93       	push	r28
 10c:	df 93       	push	r29
 10e:	00 d0       	rcall	.+0      	; 0x110 <GetBit+0x6>
 110:	cd b7       	in	r28, 0x3d	; 61
 112:	de b7       	in	r29, 0x3e	; 62
 114:	89 83       	std	Y+1, r24	; 0x01
 116:	6a 83       	std	Y+2, r22	; 0x02

	return ((x & (0x01 << k)) != 0);
 118:	89 81       	ldd	r24, Y+1	; 0x01
 11a:	88 2f       	mov	r24, r24
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	2a 81       	ldd	r18, Y+2	; 0x02
 120:	22 2f       	mov	r18, r18
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	02 c0       	rjmp	.+4      	; 0x12a <GetBit+0x20>
 126:	95 95       	asr	r25
 128:	87 95       	ror	r24
 12a:	2a 95       	dec	r18
 12c:	e2 f7       	brpl	.-8      	; 0x126 <GetBit+0x1c>
 12e:	81 70       	andi	r24, 0x01	; 1
 130:	99 27       	eor	r25, r25
 132:	21 e0       	ldi	r18, 0x01	; 1
 134:	89 2b       	or	r24, r25
 136:	09 f4       	brne	.+2      	; 0x13a <GetBit+0x30>
 138:	20 e0       	ldi	r18, 0x00	; 0
 13a:	82 2f       	mov	r24, r18

}
 13c:	0f 90       	pop	r0
 13e:	0f 90       	pop	r0
 140:	df 91       	pop	r29
 142:	cf 91       	pop	r28
 144:	08 95       	ret

00000146 <Tick>:


void Tick() {
 146:	cf 93       	push	r28
 148:	df 93       	push	r29
 14a:	cd b7       	in	r28, 0x3d	; 61
 14c:	de b7       	in	r29, 0x3e	; 62
	switch (state) { //Transitions
 14e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <state>
 152:	88 2f       	mov	r24, r24
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	82 30       	cpi	r24, 0x02	; 2
 158:	91 05       	cpc	r25, r1
 15a:	09 f4       	brne	.+2      	; 0x15e <Tick+0x18>
 15c:	63 c0       	rjmp	.+198    	; 0x224 <Tick+0xde>
 15e:	83 30       	cpi	r24, 0x03	; 3
 160:	91 05       	cpc	r25, r1
 162:	34 f4       	brge	.+12     	; 0x170 <Tick+0x2a>
 164:	00 97       	sbiw	r24, 0x00	; 0
 166:	81 f0       	breq	.+32     	; 0x188 <Tick+0x42>
 168:	01 97       	sbiw	r24, 0x01	; 1
 16a:	09 f4       	brne	.+2      	; 0x16e <Tick+0x28>
 16c:	4e c0       	rjmp	.+156    	; 0x20a <Tick+0xc4>
			state = Unlocked;
		}
		break;
		
		default:
		break;
 16e:	04 c1       	rjmp	.+520    	; 0x378 <Tick+0x232>

}


void Tick() {
	switch (state) { //Transitions
 170:	84 30       	cpi	r24, 0x04	; 4
 172:	91 05       	cpc	r25, r1
 174:	09 f4       	brne	.+2      	; 0x178 <Tick+0x32>
 176:	a6 c0       	rjmp	.+332    	; 0x2c4 <Tick+0x17e>
 178:	84 30       	cpi	r24, 0x04	; 4
 17a:	91 05       	cpc	r25, r1
 17c:	0c f4       	brge	.+2      	; 0x180 <Tick+0x3a>
 17e:	60 c0       	rjmp	.+192    	; 0x240 <Tick+0xfa>
 180:	05 97       	sbiw	r24, 0x05	; 5
 182:	09 f4       	brne	.+2      	; 0x186 <Tick+0x40>
 184:	e3 c0       	rjmp	.+454    	; 0x34c <Tick+0x206>
			state = Unlocked;
		}
		break;
		
		default:
		break;
 186:	f8 c0       	rjmp	.+496    	; 0x378 <Tick+0x232>


void Tick() {
	switch (state) { //Transitions
		case Locked:
		if (GetBit(A, 2))
 188:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <A>
 18c:	62 e0       	ldi	r22, 0x02	; 2
 18e:	bd df       	rcall	.-134    	; 0x10a <GetBit>
 190:	88 23       	and	r24, r24
 192:	21 f0       	breq	.+8      	; 0x19c <Tick+0x56>
		{
			state = PA2_prsd;
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <state>
		}
		else 
		{
			state = Locked;
		}
		break;
 19a:	ee c0       	rjmp	.+476    	; 0x378 <Tick+0x232>
		case Locked:
		if (GetBit(A, 2))
		{
			state = PA2_prsd;
		}
		else if((GetBit(A,1)) && (GetBit(A,2)) && (GetBit(A,3)))
 19c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <A>
 1a0:	61 e0       	ldi	r22, 0x01	; 1
 1a2:	b3 df       	rcall	.-154    	; 0x10a <GetBit>
 1a4:	88 23       	and	r24, r24
 1a6:	79 f0       	breq	.+30     	; 0x1c6 <Tick+0x80>
 1a8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <A>
 1ac:	62 e0       	ldi	r22, 0x02	; 2
 1ae:	ad df       	rcall	.-166    	; 0x10a <GetBit>
 1b0:	88 23       	and	r24, r24
 1b2:	49 f0       	breq	.+18     	; 0x1c6 <Tick+0x80>
 1b4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <A>
 1b8:	63 e0       	ldi	r22, 0x03	; 3
 1ba:	a7 df       	rcall	.-178    	; 0x10a <GetBit>
 1bc:	88 23       	and	r24, r24
 1be:	19 f0       	breq	.+6      	; 0x1c6 <Tick+0x80>
		{
			state = Locked;
 1c0:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <state>
		}
		else if ((GetBit(A,1)) && (GetBit(A,2)))
 1c4:	21 c0       	rjmp	.+66     	; 0x208 <Tick+0xc2>
 1c6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <A>
 1ca:	61 e0       	ldi	r22, 0x01	; 1
 1cc:	9e df       	rcall	.-196    	; 0x10a <GetBit>
 1ce:	88 23       	and	r24, r24
 1d0:	49 f0       	breq	.+18     	; 0x1e4 <Tick+0x9e>
 1d2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <A>
 1d6:	62 e0       	ldi	r22, 0x02	; 2
 1d8:	98 df       	rcall	.-208    	; 0x10a <GetBit>
 1da:	88 23       	and	r24, r24
 1dc:	19 f0       	breq	.+6      	; 0x1e4 <Tick+0x9e>
		{
			state = Locked;
 1de:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <state>
		}
		else if ((GetBit(A,1)) &&  (GetBit(A,3)))
 1e2:	12 c0       	rjmp	.+36     	; 0x208 <Tick+0xc2>
 1e4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <A>
 1e8:	61 e0       	ldi	r22, 0x01	; 1
 1ea:	8f df       	rcall	.-226    	; 0x10a <GetBit>
 1ec:	88 23       	and	r24, r24
 1ee:	49 f0       	breq	.+18     	; 0x202 <Tick+0xbc>
 1f0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <A>
 1f4:	63 e0       	ldi	r22, 0x03	; 3
 1f6:	89 df       	rcall	.-238    	; 0x10a <GetBit>
 1f8:	88 23       	and	r24, r24
 1fa:	19 f0       	breq	.+6      	; 0x202 <Tick+0xbc>
		{
			state = Locked;
 1fc:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <state>
		}
		else 
		{
			state = Locked;
 200:	03 c0       	rjmp	.+6      	; 0x208 <Tick+0xc2>
 202:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <state>
		}
		break;
 206:	b8 c0       	rjmp	.+368    	; 0x378 <Tick+0x232>
		
		case PA2_prsd:
		if (GetBit(A, 2))
 208:	b7 c0       	rjmp	.+366    	; 0x378 <Tick+0x232>
 20a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <A>
 20e:	62 e0       	ldi	r22, 0x02	; 2
 210:	7c df       	rcall	.-264    	; 0x10a <GetBit>
 212:	88 23       	and	r24, r24
 214:	21 f0       	breq	.+8      	; 0x21e <Tick+0xd8>
		{
			state = PA2_prsd;
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <state>
		}
		
		else 
		{
			state = PA2_rlsd;
 21c:	03 c0       	rjmp	.+6      	; 0x224 <Tick+0xde>
 21e:	83 e0       	ldi	r24, 0x03	; 3
 220:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <state>
		}
		case PA2_prsd1:
		if (GetBit(A, 2))
 224:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <A>
 228:	62 e0       	ldi	r22, 0x02	; 2
 22a:	6f df       	rcall	.-290    	; 0x10a <GetBit>
 22c:	88 23       	and	r24, r24
 22e:	21 f0       	breq	.+8      	; 0x238 <Tick+0xf2>
		{
			state = PA2_prsd1;
 230:	82 e0       	ldi	r24, 0x02	; 2
 232:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <state>
		}
		else 
		{
			state = PA2_rlsd1;
 236:	a0 c0       	rjmp	.+320    	; 0x378 <Tick+0x232>
 238:	84 e0       	ldi	r24, 0x04	; 4
 23a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <state>
		}
		break;
		
		case PA2_rlsd:
		if(GetBit(A, 1))
 23e:	9c c0       	rjmp	.+312    	; 0x378 <Tick+0x232>
 240:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <A>
 244:	61 e0       	ldi	r22, 0x01	; 1
 246:	61 df       	rcall	.-318    	; 0x10a <GetBit>
 248:	88 23       	and	r24, r24
		{
			state = Unlocked;
 24a:	21 f0       	breq	.+8      	; 0x254 <Tick+0x10e>
 24c:	85 e0       	ldi	r24, 0x05	; 5
		}
		else 
		{
			state = PA2_rlsd;
		}
		break;
 24e:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <state>
		case PA2_rlsd:
		if(GetBit(A, 1))
		{
			state = Unlocked;
		}
		else if ((GetBit(A,1)) && (GetBit(A,2)) && (GetBit(A,3)))
 252:	92 c0       	rjmp	.+292    	; 0x378 <Tick+0x232>
 254:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <A>
 258:	61 e0       	ldi	r22, 0x01	; 1
 25a:	57 df       	rcall	.-338    	; 0x10a <GetBit>
 25c:	88 23       	and	r24, r24
 25e:	79 f0       	breq	.+30     	; 0x27e <Tick+0x138>
 260:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <A>
 264:	62 e0       	ldi	r22, 0x02	; 2
 266:	51 df       	rcall	.-350    	; 0x10a <GetBit>
 268:	88 23       	and	r24, r24
 26a:	49 f0       	breq	.+18     	; 0x27e <Tick+0x138>
 26c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <A>
 270:	63 e0       	ldi	r22, 0x03	; 3
 272:	4b df       	rcall	.-362    	; 0x10a <GetBit>
		{
			state = Locked;
 274:	88 23       	and	r24, r24
 276:	19 f0       	breq	.+6      	; 0x27e <Tick+0x138>
 278:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <state>
		}
		else if ((GetBit(A,1)) && (GetBit(A,2)))
 27c:	22 c0       	rjmp	.+68     	; 0x2c2 <Tick+0x17c>
 27e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <A>
 282:	61 e0       	ldi	r22, 0x01	; 1
 284:	42 df       	rcall	.-380    	; 0x10a <GetBit>
 286:	88 23       	and	r24, r24
 288:	49 f0       	breq	.+18     	; 0x29c <Tick+0x156>
 28a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <A>
 28e:	62 e0       	ldi	r22, 0x02	; 2
 290:	3c df       	rcall	.-392    	; 0x10a <GetBit>
		{
			state = Locked;
 292:	88 23       	and	r24, r24
 294:	19 f0       	breq	.+6      	; 0x29c <Tick+0x156>
 296:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <state>
		}
		else if ((GetBit(A,1)) &&  (GetBit(A,3)))
 29a:	13 c0       	rjmp	.+38     	; 0x2c2 <Tick+0x17c>
 29c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <A>
 2a0:	61 e0       	ldi	r22, 0x01	; 1
 2a2:	33 df       	rcall	.-410    	; 0x10a <GetBit>
 2a4:	88 23       	and	r24, r24
 2a6:	49 f0       	breq	.+18     	; 0x2ba <Tick+0x174>
 2a8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <A>
 2ac:	63 e0       	ldi	r22, 0x03	; 3
 2ae:	2d df       	rcall	.-422    	; 0x10a <GetBit>
 2b0:	88 23       	and	r24, r24
		{
			state = Locked;
 2b2:	19 f0       	breq	.+6      	; 0x2ba <Tick+0x174>
 2b4:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <state>
		}
		else 
		{
			state = PA2_rlsd;
 2b8:	04 c0       	rjmp	.+8      	; 0x2c2 <Tick+0x17c>
 2ba:	83 e0       	ldi	r24, 0x03	; 3
		}
		break;
 2bc:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <state>
		
		case PA2_rlsd1:
		if(GetBit(A, 1))
 2c0:	5b c0       	rjmp	.+182    	; 0x378 <Tick+0x232>
 2c2:	5a c0       	rjmp	.+180    	; 0x378 <Tick+0x232>
 2c4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <A>
 2c8:	61 e0       	ldi	r22, 0x01	; 1
 2ca:	1f df       	rcall	.-450    	; 0x10a <GetBit>
		{
			state = Locked;
 2cc:	88 23       	and	r24, r24
 2ce:	19 f0       	breq	.+6      	; 0x2d6 <Tick+0x190>
		}
		else 
		{
			state = PA2_rlsd1;
		}
		break;
 2d0:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <state>
		case PA2_rlsd1:
		if(GetBit(A, 1))
		{
			state = Locked;
		}
		else if ((GetBit(A,1)) && (GetBit(A,2)) && (GetBit(A,3)))
 2d4:	51 c0       	rjmp	.+162    	; 0x378 <Tick+0x232>
 2d6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <A>
 2da:	61 e0       	ldi	r22, 0x01	; 1
 2dc:	16 df       	rcall	.-468    	; 0x10a <GetBit>
 2de:	88 23       	and	r24, r24
 2e0:	81 f0       	breq	.+32     	; 0x302 <Tick+0x1bc>
 2e2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <A>
 2e6:	62 e0       	ldi	r22, 0x02	; 2
 2e8:	10 df       	rcall	.-480    	; 0x10a <GetBit>
 2ea:	88 23       	and	r24, r24
 2ec:	51 f0       	breq	.+20     	; 0x302 <Tick+0x1bc>
 2ee:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <A>
 2f2:	63 e0       	ldi	r22, 0x03	; 3
 2f4:	0a df       	rcall	.-492    	; 0x10a <GetBit>
 2f6:	88 23       	and	r24, r24
		{
			state = Unlocked;
 2f8:	21 f0       	breq	.+8      	; 0x302 <Tick+0x1bc>
 2fa:	85 e0       	ldi	r24, 0x05	; 5
 2fc:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <state>
		}
		else if ((GetBit(A,1)) && (GetBit(A,2)))
 300:	24 c0       	rjmp	.+72     	; 0x34a <Tick+0x204>
 302:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <A>
 306:	61 e0       	ldi	r22, 0x01	; 1
 308:	00 df       	rcall	.-512    	; 0x10a <GetBit>
 30a:	88 23       	and	r24, r24
 30c:	51 f0       	breq	.+20     	; 0x322 <Tick+0x1dc>
 30e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <A>
 312:	62 e0       	ldi	r22, 0x02	; 2
 314:	fa de       	rcall	.-524    	; 0x10a <GetBit>
 316:	88 23       	and	r24, r24
		{
			state = Unlocked;
 318:	21 f0       	breq	.+8      	; 0x322 <Tick+0x1dc>
 31a:	85 e0       	ldi	r24, 0x05	; 5
 31c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <state>
		}
		else if ((GetBit(A,1)) &&  (GetBit(A,3)))
 320:	14 c0       	rjmp	.+40     	; 0x34a <Tick+0x204>
 322:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <A>
 326:	61 e0       	ldi	r22, 0x01	; 1
 328:	f0 de       	rcall	.-544    	; 0x10a <GetBit>
 32a:	88 23       	and	r24, r24
 32c:	51 f0       	breq	.+20     	; 0x342 <Tick+0x1fc>
 32e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <A>
 332:	63 e0       	ldi	r22, 0x03	; 3
 334:	ea de       	rcall	.-556    	; 0x10a <GetBit>
 336:	88 23       	and	r24, r24
		{
			state = Unlocked;
 338:	21 f0       	breq	.+8      	; 0x342 <Tick+0x1fc>
 33a:	85 e0       	ldi	r24, 0x05	; 5
 33c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <state>
		}
		else 
		{
			state = PA2_rlsd1;
 340:	04 c0       	rjmp	.+8      	; 0x34a <Tick+0x204>
 342:	84 e0       	ldi	r24, 0x04	; 4
 344:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <state>
		}
		break;
 348:	17 c0       	rjmp	.+46     	; 0x378 <Tick+0x232>
		case Unlocked:
		if(GetBit(A, 7))
 34a:	16 c0       	rjmp	.+44     	; 0x378 <Tick+0x232>
 34c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <A>
 350:	67 e0       	ldi	r22, 0x07	; 7
 352:	db de       	rcall	.-586    	; 0x10a <GetBit>
 354:	88 23       	and	r24, r24
 356:	11 f0       	breq	.+4      	; 0x35c <Tick+0x216>
		{
			state = Locked;
 358:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <state>
		}
		if(GetBit(A,2))
 35c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <A>
 360:	62 e0       	ldi	r22, 0x02	; 2
 362:	d3 de       	rcall	.-602    	; 0x10a <GetBit>
 364:	88 23       	and	r24, r24
 366:	21 f0       	breq	.+8      	; 0x370 <Tick+0x22a>
 368:	82 e0       	ldi	r24, 0x02	; 2
		{
			state = PA2_prsd1;
 36a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <state>
 36e:	03 c0       	rjmp	.+6      	; 0x376 <Tick+0x230>
		}
		else
		{
			state = Unlocked;
		}
		break;
 370:	85 e0       	ldi	r24, 0x05	; 5
		{
			state = PA2_prsd1;
		}
		else
		{
			state = Unlocked;
 372:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <state>
		}
		break;
 376:	00 00       	nop
		
		default:
		break;
	}
	switch (state) { //State Actions
 378:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <state>
 37c:	88 2f       	mov	r24, r24
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	81 30       	cpi	r24, 0x01	; 1
 382:	91 05       	cpc	r25, r1
 384:	19 f1       	breq	.+70     	; 0x3cc <Tick+0x286>
 386:	82 30       	cpi	r24, 0x02	; 2
 388:	91 05       	cpc	r25, r1
 38a:	1c f4       	brge	.+6      	; 0x392 <Tick+0x24c>
		tmpB = SetBit(tmpB, 0, 1);
		tmpC = SetBit(tmpC, 0, 1);
		tmpC = SetBit(tmpC, 1, 1);
		break;
		default:
		break;
 38c:	89 2b       	or	r24, r25
		break;
		
		default:
		break;
	}
	switch (state) { //State Actions
 38e:	41 f0       	breq	.+16     	; 0x3a0 <Tick+0x25a>
 390:	5f c0       	rjmp	.+190    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 392:	83 30       	cpi	r24, 0x03	; 3
 394:	91 05       	cpc	r25, r1
 396:	81 f1       	breq	.+96     	; 0x3f8 <Tick+0x2b2>
		tmpB = SetBit(tmpB, 0, 1);
		tmpC = SetBit(tmpC, 0, 1);
		tmpC = SetBit(tmpC, 1, 1);
		break;
		default:
		break;
 398:	05 97       	sbiw	r24, 0x05	; 5
		default:
		break;
	}
	switch (state) { //State Actions
		case Locked: // initial state, Locked
		tmpB = SetBit(tmpB, 0, 0);
 39a:	09 f4       	brne	.+2      	; 0x39e <Tick+0x258>
 39c:	43 c0       	rjmp	.+134    	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 39e:	58 c0       	rjmp	.+176    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 3a0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 3a4:	40 e0       	ldi	r20, 0x00	; 0
 3a6:	60 e0       	ldi	r22, 0x00	; 0
		tmpC = SetBit(tmpC, 0, 0);
 3a8:	82 de       	rcall	.-764    	; 0xae <SetBit>
 3aa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 3ae:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tmpC>
 3b2:	40 e0       	ldi	r20, 0x00	; 0
 3b4:	60 e0       	ldi	r22, 0x00	; 0
		tmpC = SetBit(tmpC, 1, 0);
 3b6:	7b de       	rcall	.-778    	; 0xae <SetBit>
 3b8:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tmpC>
 3bc:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tmpC>
 3c0:	40 e0       	ldi	r20, 0x00	; 0
 3c2:	61 e0       	ldi	r22, 0x01	; 1
		break;
 3c4:	74 de       	rcall	.-792    	; 0xae <SetBit>
		case PA2_prsd: // Pressing #
		tmpB = SetBit(tmpB, 0, 0);
 3c6:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tmpC>
 3ca:	42 c0       	rjmp	.+132    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 3cc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 3d0:	40 e0       	ldi	r20, 0x00	; 0
 3d2:	60 e0       	ldi	r22, 0x00	; 0
		tmpC = SetBit(tmpC, 0, 1);
 3d4:	6c de       	rcall	.-808    	; 0xae <SetBit>
 3d6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 3da:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tmpC>
 3de:	41 e0       	ldi	r20, 0x01	; 1
 3e0:	60 e0       	ldi	r22, 0x00	; 0
		tmpC = SetBit(tmpC, 1, 0);
 3e2:	65 de       	rcall	.-822    	; 0xae <SetBit>
 3e4:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tmpC>
 3e8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tmpC>
 3ec:	40 e0       	ldi	r20, 0x00	; 0
 3ee:	61 e0       	ldi	r22, 0x01	; 1
		
		break;
		case PA2_rlsd: // # released
		tmpB = SetBit(tmpB, 0, 0);
 3f0:	5e de       	rcall	.-836    	; 0xae <SetBit>
 3f2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tmpC>
 3f6:	2c c0       	rjmp	.+88     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 3f8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 3fc:	40 e0       	ldi	r20, 0x00	; 0
		tmpC = SetBit(tmpC, 0, 0);
 3fe:	60 e0       	ldi	r22, 0x00	; 0
 400:	56 de       	rcall	.-852    	; 0xae <SetBit>
 402:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 406:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tmpC>
 40a:	40 e0       	ldi	r20, 0x00	; 0
 40c:	60 e0       	ldi	r22, 0x00	; 0
		tmpC = SetBit(tmpC, 1, 1);
 40e:	4f de       	rcall	.-866    	; 0xae <SetBit>
 410:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tmpC>
 414:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tmpC>
 418:	41 e0       	ldi	r20, 0x01	; 1
 41a:	61 e0       	ldi	r22, 0x01	; 1
 41c:	48 de       	rcall	.-880    	; 0xae <SetBit>
		break;
 41e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tmpC>
		case Unlocked: // Unlocked PB0 = 0x01
		tmpB = SetBit(tmpB, 0, 1);
 422:	16 c0       	rjmp	.+44     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 424:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 428:	41 e0       	ldi	r20, 0x01	; 1
 42a:	60 e0       	ldi	r22, 0x00	; 0
 42c:	40 de       	rcall	.-896    	; 0xae <SetBit>
 42e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		tmpC = SetBit(tmpC, 0, 1);
 432:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tmpC>
 436:	41 e0       	ldi	r20, 0x01	; 1
 438:	60 e0       	ldi	r22, 0x00	; 0
 43a:	39 de       	rcall	.-910    	; 0xae <SetBit>
 43c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tmpC>
		tmpC = SetBit(tmpC, 1, 1);
 440:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tmpC>
 444:	41 e0       	ldi	r20, 0x01	; 1
 446:	61 e0       	ldi	r22, 0x01	; 1
 448:	32 de       	rcall	.-924    	; 0xae <SetBit>
 44a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tmpC>
 44e:	00 00       	nop
		break;
 450:	00 00       	nop
		default:
		break;
	}
}
 452:	df 91       	pop	r29
 454:	cf 91       	pop	r28
 456:	08 95       	ret

00000458 <main>:
 458:	cf 93       	push	r28

int main()
{
 45a:	df 93       	push	r29
 45c:	cd b7       	in	r28, 0x3d	; 61
 45e:	de b7       	in	r29, 0x3e	; 62
	state = Locked; // initial state, Locked
 460:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <state>
	DDRA = 0x00; PORTA = 0xFF; // Configure port A's 8 pins as input
 464:	81 e2       	ldi	r24, 0x21	; 33
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	fc 01       	movw	r30, r24
 46a:	10 82       	st	Z, r1
 46c:	82 e2       	ldi	r24, 0x22	; 34
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	2f ef       	ldi	r18, 0xFF	; 255
 472:	fc 01       	movw	r30, r24
 474:	20 83       	st	Z, r18
	DDRB = 0xFF; PORTB = 0x00; // Configure port B's 8 pins as outputs
 476:	84 e2       	ldi	r24, 0x24	; 36
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	2f ef       	ldi	r18, 0xFF	; 255
 47c:	fc 01       	movw	r30, r24
 47e:	20 83       	st	Z, r18
 480:	85 e2       	ldi	r24, 0x25	; 37
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	fc 01       	movw	r30, r24
 486:	10 82       	st	Z, r1
	DDRC = 0xFF; PORTC = 0x00;
 488:	87 e2       	ldi	r24, 0x27	; 39
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	2f ef       	ldi	r18, 0xFF	; 255
 48e:	fc 01       	movw	r30, r24
 490:	20 83       	st	Z, r18
 492:	88 e2       	ldi	r24, 0x28	; 40
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	fc 01       	movw	r30, r24
 498:	10 82       	st	Z, r1

	while(1)
	{	A = PINA;
 49a:	80 e2       	ldi	r24, 0x20	; 32
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	fc 01       	movw	r30, r24
 4a0:	80 81       	ld	r24, Z
 4a2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <A>
		Tick();
 4a6:	4f de       	rcall	.-866    	; 0x146 <Tick>
		// 3) write results to port
		PORTB = tmpB;
 4a8:	85 e2       	ldi	r24, 0x25	; 37
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
 4b0:	fc 01       	movw	r30, r24
 4b2:	20 83       	st	Z, r18
		PORTC = tmpC;
 4b4:	88 e2       	ldi	r24, 0x28	; 40
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <tmpC>
 4bc:	fc 01       	movw	r30, r24
 4be:	20 83       	st	Z, r18
	}
 4c0:	ec cf       	rjmp	.-40     	; 0x49a <main+0x42>

000004c2 <_exit>:
 4c2:	f8 94       	cli

000004c4 <__stop_program>:
 4c4:	ff cf       	rjmp	.-2      	; 0x4c4 <__stop_program>
