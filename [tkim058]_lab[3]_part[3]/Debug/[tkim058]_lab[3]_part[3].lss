
[tkim058]_lab[3]_part[3].elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000032e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  000003a2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003a2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000414  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000916  00000000  00000000  0000044c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007f7  00000000  00000000  00000d62  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003bf  00000000  00000000  00001559  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000094  00000000  00000000  00001918  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000044b  00000000  00000000  000019ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000106  00000000  00000000  00001df7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001efd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a4 30       	cpi	r26, 0x04	; 4
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0b d1       	rcall	.+534    	; 0x2c0 <main>
  aa:	3f c1       	rjmp	.+638    	; 0x32a <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <SetBit>:
unsigned char tmpC = 0x00;
unsigned char A = 0x00;

// Bit-access function

unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  b2:	00 d0       	rcall	.+0      	; 0xb4 <SetBit+0x6>
  b4:	1f 92       	push	r1
  b6:	cd b7       	in	r28, 0x3d	; 61
  b8:	de b7       	in	r29, 0x3e	; 62
  ba:	89 83       	std	Y+1, r24	; 0x01
  bc:	6a 83       	std	Y+2, r22	; 0x02
  be:	4b 83       	std	Y+3, r20	; 0x03

	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
  c0:	8b 81       	ldd	r24, Y+3	; 0x03
  c2:	88 23       	and	r24, r24
  c4:	71 f0       	breq	.+28     	; 0xe2 <SetBit+0x34>
  c6:	8a 81       	ldd	r24, Y+2	; 0x02
  c8:	28 2f       	mov	r18, r24
  ca:	30 e0       	ldi	r19, 0x00	; 0
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <SetBit+0x28>
  d2:	88 0f       	add	r24, r24
  d4:	99 1f       	adc	r25, r25
  d6:	2a 95       	dec	r18
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <SetBit+0x24>
  da:	98 2f       	mov	r25, r24
  dc:	89 81       	ldd	r24, Y+1	; 0x01
  de:	89 2b       	or	r24, r25
  e0:	0e c0       	rjmp	.+28     	; 0xfe <SetBit+0x50>
  e2:	8a 81       	ldd	r24, Y+2	; 0x02
  e4:	28 2f       	mov	r18, r24
  e6:	30 e0       	ldi	r19, 0x00	; 0
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <SetBit+0x44>
  ee:	88 0f       	add	r24, r24
  f0:	99 1f       	adc	r25, r25
  f2:	2a 95       	dec	r18
  f4:	e2 f7       	brpl	.-8      	; 0xee <SetBit+0x40>
  f6:	98 2f       	mov	r25, r24
  f8:	90 95       	com	r25
  fa:	89 81       	ldd	r24, Y+1	; 0x01
  fc:	89 23       	and	r24, r25

}
  fe:	0f 90       	pop	r0
 100:	0f 90       	pop	r0
 102:	0f 90       	pop	r0
 104:	df 91       	pop	r29
 106:	cf 91       	pop	r28
 108:	08 95       	ret

0000010a <GetBit>:

unsigned char GetBit(unsigned char x, unsigned char k) {
 10a:	cf 93       	push	r28
 10c:	df 93       	push	r29
 10e:	00 d0       	rcall	.+0      	; 0x110 <GetBit+0x6>
 110:	cd b7       	in	r28, 0x3d	; 61
 112:	de b7       	in	r29, 0x3e	; 62
 114:	89 83       	std	Y+1, r24	; 0x01
 116:	6a 83       	std	Y+2, r22	; 0x02

	return ((x & (0x01 << k)) != 0);
 118:	89 81       	ldd	r24, Y+1	; 0x01
 11a:	88 2f       	mov	r24, r24
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	2a 81       	ldd	r18, Y+2	; 0x02
 120:	22 2f       	mov	r18, r18
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	02 c0       	rjmp	.+4      	; 0x12a <GetBit+0x20>
 126:	95 95       	asr	r25
 128:	87 95       	ror	r24
 12a:	2a 95       	dec	r18
 12c:	e2 f7       	brpl	.-8      	; 0x126 <GetBit+0x1c>
 12e:	81 70       	andi	r24, 0x01	; 1
 130:	99 27       	eor	r25, r25
 132:	21 e0       	ldi	r18, 0x01	; 1
 134:	89 2b       	or	r24, r25
 136:	09 f4       	brne	.+2      	; 0x13a <GetBit+0x30>
 138:	20 e0       	ldi	r18, 0x00	; 0
 13a:	82 2f       	mov	r24, r18

}
 13c:	0f 90       	pop	r0
 13e:	0f 90       	pop	r0
 140:	df 91       	pop	r29
 142:	cf 91       	pop	r28
 144:	08 95       	ret

00000146 <Tick>:


void Tick() {
 146:	cf 93       	push	r28
 148:	df 93       	push	r29
 14a:	cd b7       	in	r28, 0x3d	; 61
 14c:	de b7       	in	r29, 0x3e	; 62
	switch (state) { //Transitions
 14e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <state>
 152:	88 2f       	mov	r24, r24
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	81 30       	cpi	r24, 0x01	; 1
 158:	91 05       	cpc	r25, r1
 15a:	c9 f0       	breq	.+50     	; 0x18e <Tick+0x48>
 15c:	82 30       	cpi	r24, 0x02	; 2
 15e:	91 05       	cpc	r25, r1
 160:	1c f4       	brge	.+6      	; 0x168 <Tick+0x22>
 162:	89 2b       	or	r24, r25
 164:	39 f0       	breq	.+14     	; 0x174 <Tick+0x2e>
			state = Unlocked;
		}
		break;
		
		default:
		break;
 166:	3c c0       	rjmp	.+120    	; 0x1e0 <Tick+0x9a>

}


void Tick() {
	switch (state) { //Transitions
 168:	82 30       	cpi	r24, 0x02	; 2
 16a:	91 05       	cpc	r25, r1
 16c:	f1 f0       	breq	.+60     	; 0x1aa <Tick+0x64>
 16e:	03 97       	sbiw	r24, 0x03	; 3
 170:	51 f1       	breq	.+84     	; 0x1c6 <Tick+0x80>
			state = Unlocked;
		}
		break;
		
		default:
		break;
 172:	36 c0       	rjmp	.+108    	; 0x1e0 <Tick+0x9a>


void Tick() {
	switch (state) { //Transitions
		case Locked:
		if (GetBit(A, 2))
 174:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <A>
 178:	62 e0       	ldi	r22, 0x02	; 2
 17a:	c7 df       	rcall	.-114    	; 0x10a <GetBit>
 17c:	88 23       	and	r24, r24
 17e:	21 f0       	breq	.+8      	; 0x188 <Tick+0x42>
		{
			state = PA2_prsd;
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <state>
		}
		else
		{
			state = Locked;
		}
		break;
 186:	2c c0       	rjmp	.+88     	; 0x1e0 <Tick+0x9a>
		{
			state = PA2_prsd;
		}
		else
		{
			state = Locked;
 188:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <state>
		}
		break;
 18c:	29 c0       	rjmp	.+82     	; 0x1e0 <Tick+0x9a>
		
		case PA2_prsd:
		if (GetBit(A, 2))
 18e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <A>
 192:	62 e0       	ldi	r22, 0x02	; 2
 194:	ba df       	rcall	.-140    	; 0x10a <GetBit>
 196:	88 23       	and	r24, r24
 198:	21 f0       	breq	.+8      	; 0x1a2 <Tick+0x5c>
		{
			state = PA2_prsd;
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <state>
		}
		else
		{
			state = PA2_rlsd;
		}
		break;
 1a0:	1f c0       	rjmp	.+62     	; 0x1e0 <Tick+0x9a>
		{
			state = PA2_prsd;
		}
		else
		{
			state = PA2_rlsd;
 1a2:	82 e0       	ldi	r24, 0x02	; 2
 1a4:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <state>
		}
		break;
 1a8:	1b c0       	rjmp	.+54     	; 0x1e0 <Tick+0x9a>
		
		case PA2_rlsd:
		if(GetBit(A, 1))
 1aa:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <A>
 1ae:	61 e0       	ldi	r22, 0x01	; 1
 1b0:	ac df       	rcall	.-168    	; 0x10a <GetBit>
 1b2:	88 23       	and	r24, r24
 1b4:	21 f0       	breq	.+8      	; 0x1be <Tick+0x78>
		{
			state = Unlocked;
 1b6:	83 e0       	ldi	r24, 0x03	; 3
 1b8:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <state>
		}
		else
		{
			state = PA2_rlsd;
		}
		break;
 1bc:	11 c0       	rjmp	.+34     	; 0x1e0 <Tick+0x9a>
		{
			state = Unlocked;
		}
		else
		{
			state = PA2_rlsd;
 1be:	82 e0       	ldi	r24, 0x02	; 2
 1c0:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <state>
		}
		break;
 1c4:	0d c0       	rjmp	.+26     	; 0x1e0 <Tick+0x9a>
		
		case Unlocked:
		if(GetBit(A, 7))
 1c6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <A>
 1ca:	67 e0       	ldi	r22, 0x07	; 7
 1cc:	9e df       	rcall	.-196    	; 0x10a <GetBit>
 1ce:	88 23       	and	r24, r24
 1d0:	19 f0       	breq	.+6      	; 0x1d8 <Tick+0x92>
		{
			state = Locked;
 1d2:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <state>
		}
		else
		{
			state = Unlocked;
		}
		break;
 1d6:	03 c0       	rjmp	.+6      	; 0x1de <Tick+0x98>
		{
			state = Locked;
		}
		else
		{
			state = Unlocked;
 1d8:	83 e0       	ldi	r24, 0x03	; 3
 1da:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <state>
		}
		break;
 1de:	00 00       	nop
		
		default:
		break;
	}
	switch (state) { //State Actions
 1e0:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <state>
 1e4:	88 2f       	mov	r24, r24
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	81 30       	cpi	r24, 0x01	; 1
 1ea:	91 05       	cpc	r25, r1
 1ec:	19 f1       	breq	.+70     	; 0x234 <Tick+0xee>
 1ee:	82 30       	cpi	r24, 0x02	; 2
 1f0:	91 05       	cpc	r25, r1
 1f2:	1c f4       	brge	.+6      	; 0x1fa <Tick+0xb4>
 1f4:	89 2b       	or	r24, r25
 1f6:	41 f0       	breq	.+16     	; 0x208 <Tick+0xc2>
		tmpB = SetBit(tmpB, 0, 1);
		tmpC = SetBit(tmpC, 0, 1);
		tmpC = SetBit(tmpC, 1, 1);
		break;
		default:
		break;
 1f8:	5f c0       	rjmp	.+190    	; 0x2b8 <Tick+0x172>
		break;
		
		default:
		break;
	}
	switch (state) { //State Actions
 1fa:	82 30       	cpi	r24, 0x02	; 2
 1fc:	91 05       	cpc	r25, r1
 1fe:	81 f1       	breq	.+96     	; 0x260 <Tick+0x11a>
 200:	03 97       	sbiw	r24, 0x03	; 3
 202:	09 f4       	brne	.+2      	; 0x206 <Tick+0xc0>
 204:	43 c0       	rjmp	.+134    	; 0x28c <Tick+0x146>
		tmpB = SetBit(tmpB, 0, 1);
		tmpC = SetBit(tmpC, 0, 1);
		tmpC = SetBit(tmpC, 1, 1);
		break;
		default:
		break;
 206:	58 c0       	rjmp	.+176    	; 0x2b8 <Tick+0x172>
		default:
		break;
	}
	switch (state) { //State Actions
		case Locked: // initial state, Locked
		tmpB = SetBit(tmpB, 0, 0);
 208:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 20c:	40 e0       	ldi	r20, 0x00	; 0
 20e:	60 e0       	ldi	r22, 0x00	; 0
 210:	4e df       	rcall	.-356    	; 0xae <SetBit>
 212:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		tmpC = SetBit(tmpC, 0, 0);
 216:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tmpC>
 21a:	40 e0       	ldi	r20, 0x00	; 0
 21c:	60 e0       	ldi	r22, 0x00	; 0
 21e:	47 df       	rcall	.-370    	; 0xae <SetBit>
 220:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tmpC>
		tmpC = SetBit(tmpC, 1, 0);
 224:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tmpC>
 228:	40 e0       	ldi	r20, 0x00	; 0
 22a:	61 e0       	ldi	r22, 0x01	; 1
 22c:	40 df       	rcall	.-384    	; 0xae <SetBit>
 22e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tmpC>
		break;
 232:	42 c0       	rjmp	.+132    	; 0x2b8 <Tick+0x172>
		case PA2_prsd: // Pressing #
		tmpB = SetBit(tmpB, 0, 0);
 234:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 238:	40 e0       	ldi	r20, 0x00	; 0
 23a:	60 e0       	ldi	r22, 0x00	; 0
 23c:	38 df       	rcall	.-400    	; 0xae <SetBit>
 23e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		tmpC = SetBit(tmpC, 0, 1);
 242:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tmpC>
 246:	41 e0       	ldi	r20, 0x01	; 1
 248:	60 e0       	ldi	r22, 0x00	; 0
 24a:	31 df       	rcall	.-414    	; 0xae <SetBit>
 24c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tmpC>
		tmpC = SetBit(tmpC, 1, 0);
 250:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tmpC>
 254:	40 e0       	ldi	r20, 0x00	; 0
 256:	61 e0       	ldi	r22, 0x01	; 1
 258:	2a df       	rcall	.-428    	; 0xae <SetBit>
 25a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tmpC>
		
		break;
 25e:	2c c0       	rjmp	.+88     	; 0x2b8 <Tick+0x172>
		case PA2_rlsd: // # released
		tmpB = SetBit(tmpB, 0, 0);
 260:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 264:	40 e0       	ldi	r20, 0x00	; 0
 266:	60 e0       	ldi	r22, 0x00	; 0
 268:	22 df       	rcall	.-444    	; 0xae <SetBit>
 26a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		tmpC = SetBit(tmpC, 0, 0);
 26e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tmpC>
 272:	40 e0       	ldi	r20, 0x00	; 0
 274:	60 e0       	ldi	r22, 0x00	; 0
 276:	1b df       	rcall	.-458    	; 0xae <SetBit>
 278:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tmpC>
		tmpC = SetBit(tmpC, 1, 1);
 27c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tmpC>
 280:	41 e0       	ldi	r20, 0x01	; 1
 282:	61 e0       	ldi	r22, 0x01	; 1
 284:	14 df       	rcall	.-472    	; 0xae <SetBit>
 286:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tmpC>
		break;
 28a:	16 c0       	rjmp	.+44     	; 0x2b8 <Tick+0x172>
		case Unlocked: // Unlocked PB0 = 0x01
		tmpB = SetBit(tmpB, 0, 1);
 28c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 290:	41 e0       	ldi	r20, 0x01	; 1
 292:	60 e0       	ldi	r22, 0x00	; 0
 294:	0c df       	rcall	.-488    	; 0xae <SetBit>
 296:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		tmpC = SetBit(tmpC, 0, 1);
 29a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tmpC>
 29e:	41 e0       	ldi	r20, 0x01	; 1
 2a0:	60 e0       	ldi	r22, 0x00	; 0
 2a2:	05 df       	rcall	.-502    	; 0xae <SetBit>
 2a4:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tmpC>
 2a8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tmpC>
		tmpC = SetBit(tmpC, 1, 1);
 2ac:	41 e0       	ldi	r20, 0x01	; 1
 2ae:	61 e0       	ldi	r22, 0x01	; 1
 2b0:	fe de       	rcall	.-516    	; 0xae <SetBit>
 2b2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tmpC>
 2b6:	00 00       	nop
 2b8:	00 00       	nop
		break;
 2ba:	df 91       	pop	r29
		default:
		break;
	}
}
 2bc:	cf 91       	pop	r28
 2be:	08 95       	ret

000002c0 <main>:
 2c0:	cf 93       	push	r28
 2c2:	df 93       	push	r29

int main()
{
 2c4:	cd b7       	in	r28, 0x3d	; 61
 2c6:	de b7       	in	r29, 0x3e	; 62
	state = Locked; // initial state, Locked
 2c8:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <state>
	DDRA = 0x00; PORTA = 0xFF; // Configure port A's 8 pins as input
 2cc:	81 e2       	ldi	r24, 0x21	; 33
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	fc 01       	movw	r30, r24
 2d2:	10 82       	st	Z, r1
 2d4:	82 e2       	ldi	r24, 0x22	; 34
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	2f ef       	ldi	r18, 0xFF	; 255
 2da:	fc 01       	movw	r30, r24
 2dc:	20 83       	st	Z, r18
	DDRB = 0xFF; PORTB = 0x00; // Configure port B's 8 pins as outputs
 2de:	84 e2       	ldi	r24, 0x24	; 36
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	2f ef       	ldi	r18, 0xFF	; 255
 2e4:	fc 01       	movw	r30, r24
 2e6:	20 83       	st	Z, r18
 2e8:	85 e2       	ldi	r24, 0x25	; 37
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	fc 01       	movw	r30, r24
 2ee:	10 82       	st	Z, r1
	DDRC = 0xFF; PORTC = 0x00;
 2f0:	87 e2       	ldi	r24, 0x27	; 39
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	2f ef       	ldi	r18, 0xFF	; 255
 2f6:	fc 01       	movw	r30, r24
 2f8:	20 83       	st	Z, r18
 2fa:	88 e2       	ldi	r24, 0x28	; 40
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	fc 01       	movw	r30, r24
 300:	10 82       	st	Z, r1

	while(1)
	{	A = PINA;
 302:	80 e2       	ldi	r24, 0x20	; 32
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	fc 01       	movw	r30, r24
 308:	80 81       	ld	r24, Z
 30a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <A>
		Tick();
 30e:	1b df       	rcall	.-458    	; 0x146 <Tick>
		// 3) write results to port
		PORTB = tmpB;
 310:	85 e2       	ldi	r24, 0x25	; 37
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
 318:	fc 01       	movw	r30, r24
 31a:	20 83       	st	Z, r18
		PORTC = tmpC;
 31c:	88 e2       	ldi	r24, 0x28	; 40
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <tmpC>
 324:	fc 01       	movw	r30, r24
 326:	20 83       	st	Z, r18
	}
 328:	ec cf       	rjmp	.-40     	; 0x302 <main+0x42>

0000032a <_exit>:
 32a:	f8 94       	cli

0000032c <__stop_program>:
 32c:	ff cf       	rjmp	.-2      	; 0x32c <__stop_program>
