
[tkim058]_lab[3]_part[3].elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000478  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000404  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  00000478  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000478  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000004e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000916  00000000  00000000  00000520  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007f7  00000000  00000000  00000e36  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000467  00000000  00000000  0000162d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000094  00000000  00000000  00001a94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000044b  00000000  00000000  00001b28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000106  00000000  00000000  00001f73  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00002079  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a4 30       	cpi	r26, 0x04	; 4
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	76 d1       	rcall	.+748    	; 0x396 <main>
  aa:	aa c1       	rjmp	.+852    	; 0x400 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <SetBit>:
unsigned char tmpC = 0x00;
unsigned char A = 0x00;

// Bit-access function

unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  b2:	00 d0       	rcall	.+0      	; 0xb4 <SetBit+0x6>
  b4:	1f 92       	push	r1
  b6:	cd b7       	in	r28, 0x3d	; 61
  b8:	de b7       	in	r29, 0x3e	; 62
  ba:	89 83       	std	Y+1, r24	; 0x01
  bc:	6a 83       	std	Y+2, r22	; 0x02
  be:	4b 83       	std	Y+3, r20	; 0x03

	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
  c0:	8b 81       	ldd	r24, Y+3	; 0x03
  c2:	88 23       	and	r24, r24
  c4:	71 f0       	breq	.+28     	; 0xe2 <SetBit+0x34>
  c6:	8a 81       	ldd	r24, Y+2	; 0x02
  c8:	28 2f       	mov	r18, r24
  ca:	30 e0       	ldi	r19, 0x00	; 0
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <SetBit+0x28>
  d2:	88 0f       	add	r24, r24
  d4:	99 1f       	adc	r25, r25
  d6:	2a 95       	dec	r18
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <SetBit+0x24>
  da:	98 2f       	mov	r25, r24
  dc:	89 81       	ldd	r24, Y+1	; 0x01
  de:	89 2b       	or	r24, r25
  e0:	0e c0       	rjmp	.+28     	; 0xfe <SetBit+0x50>
  e2:	8a 81       	ldd	r24, Y+2	; 0x02
  e4:	28 2f       	mov	r18, r24
  e6:	30 e0       	ldi	r19, 0x00	; 0
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <SetBit+0x44>
  ee:	88 0f       	add	r24, r24
  f0:	99 1f       	adc	r25, r25
  f2:	2a 95       	dec	r18
  f4:	e2 f7       	brpl	.-8      	; 0xee <SetBit+0x40>
  f6:	98 2f       	mov	r25, r24
  f8:	90 95       	com	r25
  fa:	89 81       	ldd	r24, Y+1	; 0x01
  fc:	89 23       	and	r24, r25

}
  fe:	0f 90       	pop	r0
 100:	0f 90       	pop	r0
 102:	0f 90       	pop	r0
 104:	df 91       	pop	r29
 106:	cf 91       	pop	r28
 108:	08 95       	ret

0000010a <GetBit>:

unsigned char GetBit(unsigned char x, unsigned char k) {
 10a:	cf 93       	push	r28
 10c:	df 93       	push	r29
 10e:	00 d0       	rcall	.+0      	; 0x110 <GetBit+0x6>
 110:	cd b7       	in	r28, 0x3d	; 61
 112:	de b7       	in	r29, 0x3e	; 62
 114:	89 83       	std	Y+1, r24	; 0x01
 116:	6a 83       	std	Y+2, r22	; 0x02

	return ((x & (0x01 << k)) != 0);
 118:	89 81       	ldd	r24, Y+1	; 0x01
 11a:	88 2f       	mov	r24, r24
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	2a 81       	ldd	r18, Y+2	; 0x02
 120:	22 2f       	mov	r18, r18
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	02 c0       	rjmp	.+4      	; 0x12a <GetBit+0x20>
 126:	95 95       	asr	r25
 128:	87 95       	ror	r24
 12a:	2a 95       	dec	r18
 12c:	e2 f7       	brpl	.-8      	; 0x126 <GetBit+0x1c>
 12e:	81 70       	andi	r24, 0x01	; 1
 130:	99 27       	eor	r25, r25
 132:	21 e0       	ldi	r18, 0x01	; 1
 134:	89 2b       	or	r24, r25
 136:	09 f4       	brne	.+2      	; 0x13a <GetBit+0x30>
 138:	20 e0       	ldi	r18, 0x00	; 0
 13a:	82 2f       	mov	r24, r18

}
 13c:	0f 90       	pop	r0
 13e:	0f 90       	pop	r0
 140:	df 91       	pop	r29
 142:	cf 91       	pop	r28
 144:	08 95       	ret

00000146 <Tick>:


void Tick() {
 146:	cf 93       	push	r28
 148:	df 93       	push	r29
 14a:	cd b7       	in	r28, 0x3d	; 61
 14c:	de b7       	in	r29, 0x3e	; 62
	switch (state) { //Transitions
 14e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <state>
 152:	88 2f       	mov	r24, r24
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	81 30       	cpi	r24, 0x01	; 1
 158:	91 05       	cpc	r25, r1
 15a:	09 f4       	brne	.+2      	; 0x15e <Tick+0x18>
 15c:	4f c0       	rjmp	.+158    	; 0x1fc <Tick+0xb6>
 15e:	82 30       	cpi	r24, 0x02	; 2
 160:	91 05       	cpc	r25, r1
 162:	1c f4       	brge	.+6      	; 0x16a <Tick+0x24>
 164:	89 2b       	or	r24, r25
 166:	49 f0       	breq	.+18     	; 0x17a <Tick+0x34>
			state = Unlocked;
		}
		break;
		
		default:
		break;
 168:	a6 c0       	rjmp	.+332    	; 0x2b6 <Tick+0x170>

}


void Tick() {
	switch (state) { //Transitions
 16a:	82 30       	cpi	r24, 0x02	; 2
 16c:	91 05       	cpc	r25, r1
 16e:	09 f4       	brne	.+2      	; 0x172 <Tick+0x2c>
 170:	53 c0       	rjmp	.+166    	; 0x218 <Tick+0xd2>
 172:	03 97       	sbiw	r24, 0x03	; 3
 174:	09 f4       	brne	.+2      	; 0x178 <Tick+0x32>
 176:	92 c0       	rjmp	.+292    	; 0x29c <Tick+0x156>
			state = Unlocked;
		}
		break;
		
		default:
		break;
 178:	9e c0       	rjmp	.+316    	; 0x2b6 <Tick+0x170>


void Tick() {
	switch (state) { //Transitions
		case Locked:
		if (GetBit(A, 2))
 17a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <A>
 17e:	62 e0       	ldi	r22, 0x02	; 2
 180:	c4 df       	rcall	.-120    	; 0x10a <GetBit>
 182:	88 23       	and	r24, r24
 184:	21 f0       	breq	.+8      	; 0x18e <Tick+0x48>
		{
			state = PA2_prsd;
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <state>
		}
		else 
		{
			state = Locked;
		}
		break;
 18c:	94 c0       	rjmp	.+296    	; 0x2b6 <Tick+0x170>
		case Locked:
		if (GetBit(A, 2))
		{
			state = PA2_prsd;
		}
		else if((GetBit(A,1)) && (GetBit(A,2)) && (GetBit(A,3)))
 18e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <A>
 192:	61 e0       	ldi	r22, 0x01	; 1
 194:	ba df       	rcall	.-140    	; 0x10a <GetBit>
 196:	88 23       	and	r24, r24
 198:	79 f0       	breq	.+30     	; 0x1b8 <Tick+0x72>
 19a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <A>
 19e:	62 e0       	ldi	r22, 0x02	; 2
 1a0:	b4 df       	rcall	.-152    	; 0x10a <GetBit>
 1a2:	88 23       	and	r24, r24
 1a4:	49 f0       	breq	.+18     	; 0x1b8 <Tick+0x72>
 1a6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <A>
 1aa:	63 e0       	ldi	r22, 0x03	; 3
 1ac:	ae df       	rcall	.-164    	; 0x10a <GetBit>
 1ae:	88 23       	and	r24, r24
 1b0:	19 f0       	breq	.+6      	; 0x1b8 <Tick+0x72>
		{
			state = Locked;
 1b2:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <state>
		}
		else if ((GetBit(A,1)) && (GetBit(A,2)))
 1b6:	21 c0       	rjmp	.+66     	; 0x1fa <Tick+0xb4>
 1b8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <A>
 1bc:	61 e0       	ldi	r22, 0x01	; 1
 1be:	a5 df       	rcall	.-182    	; 0x10a <GetBit>
 1c0:	88 23       	and	r24, r24
 1c2:	49 f0       	breq	.+18     	; 0x1d6 <Tick+0x90>
 1c4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <A>
 1c8:	62 e0       	ldi	r22, 0x02	; 2
 1ca:	9f df       	rcall	.-194    	; 0x10a <GetBit>
 1cc:	88 23       	and	r24, r24
 1ce:	19 f0       	breq	.+6      	; 0x1d6 <Tick+0x90>
		{
			state = Locked;
 1d0:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <state>
		}
		else if ((GetBit(A,1)) &&  (GetBit(A,3)))
 1d4:	12 c0       	rjmp	.+36     	; 0x1fa <Tick+0xb4>
 1d6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <A>
 1da:	61 e0       	ldi	r22, 0x01	; 1
 1dc:	96 df       	rcall	.-212    	; 0x10a <GetBit>
 1de:	88 23       	and	r24, r24
 1e0:	49 f0       	breq	.+18     	; 0x1f4 <Tick+0xae>
 1e2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <A>
 1e6:	63 e0       	ldi	r22, 0x03	; 3
 1e8:	90 df       	rcall	.-224    	; 0x10a <GetBit>
 1ea:	88 23       	and	r24, r24
 1ec:	19 f0       	breq	.+6      	; 0x1f4 <Tick+0xae>
		{
			state = Locked;
 1ee:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <state>
		}
		else 
		{
			state = Locked;
 1f2:	03 c0       	rjmp	.+6      	; 0x1fa <Tick+0xb4>
 1f4:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <state>
		}
		break;
 1f8:	5e c0       	rjmp	.+188    	; 0x2b6 <Tick+0x170>
		
		case PA2_prsd:
		if (GetBit(A, 2))
 1fa:	5d c0       	rjmp	.+186    	; 0x2b6 <Tick+0x170>
 1fc:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <A>
 200:	62 e0       	ldi	r22, 0x02	; 2
 202:	83 df       	rcall	.-250    	; 0x10a <GetBit>
 204:	88 23       	and	r24, r24
 206:	21 f0       	breq	.+8      	; 0x210 <Tick+0xca>
		{
			state = PA2_prsd;
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <state>
		}
		
		else 
		{
			state = PA2_rlsd;
 20e:	53 c0       	rjmp	.+166    	; 0x2b6 <Tick+0x170>
 210:	82 e0       	ldi	r24, 0x02	; 2
 212:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <state>
		}
		break;
		
		case PA2_rlsd:
		if(GetBit(A, 1))
 216:	4f c0       	rjmp	.+158    	; 0x2b6 <Tick+0x170>
 218:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <A>
 21c:	61 e0       	ldi	r22, 0x01	; 1
 21e:	75 df       	rcall	.-278    	; 0x10a <GetBit>
 220:	88 23       	and	r24, r24
		{
			state = Unlocked;
 222:	21 f0       	breq	.+8      	; 0x22c <Tick+0xe6>
 224:	83 e0       	ldi	r24, 0x03	; 3
 226:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <state>
		}
		else if ((GetBit(A,1)) && (GetBit(A,2)) && (GetBit(A,3)))
 22a:	45 c0       	rjmp	.+138    	; 0x2b6 <Tick+0x170>
 22c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <A>
 230:	61 e0       	ldi	r22, 0x01	; 1
 232:	6b df       	rcall	.-298    	; 0x10a <GetBit>
 234:	88 23       	and	r24, r24
 236:	79 f0       	breq	.+30     	; 0x256 <Tick+0x110>
 238:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <A>
 23c:	62 e0       	ldi	r22, 0x02	; 2
 23e:	65 df       	rcall	.-310    	; 0x10a <GetBit>
 240:	88 23       	and	r24, r24
 242:	49 f0       	breq	.+18     	; 0x256 <Tick+0x110>
 244:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <A>
 248:	63 e0       	ldi	r22, 0x03	; 3
 24a:	5f df       	rcall	.-322    	; 0x10a <GetBit>
 24c:	88 23       	and	r24, r24
		{
			state = Locked;
 24e:	19 f0       	breq	.+6      	; 0x256 <Tick+0x110>
 250:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <state>
		}
		else if ((GetBit(A,1)) && (GetBit(A,2)))
 254:	22 c0       	rjmp	.+68     	; 0x29a <Tick+0x154>
 256:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <A>
 25a:	61 e0       	ldi	r22, 0x01	; 1
 25c:	56 df       	rcall	.-340    	; 0x10a <GetBit>
 25e:	88 23       	and	r24, r24
 260:	49 f0       	breq	.+18     	; 0x274 <Tick+0x12e>
 262:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <A>
 266:	62 e0       	ldi	r22, 0x02	; 2
 268:	50 df       	rcall	.-352    	; 0x10a <GetBit>
 26a:	88 23       	and	r24, r24
		{
			state = Locked;
 26c:	19 f0       	breq	.+6      	; 0x274 <Tick+0x12e>
 26e:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <state>
		}
		else if ((GetBit(A,1)) &&  (GetBit(A,3)))
 272:	13 c0       	rjmp	.+38     	; 0x29a <Tick+0x154>
 274:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <A>
 278:	61 e0       	ldi	r22, 0x01	; 1
 27a:	47 df       	rcall	.-370    	; 0x10a <GetBit>
 27c:	88 23       	and	r24, r24
 27e:	49 f0       	breq	.+18     	; 0x292 <Tick+0x14c>
 280:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <A>
 284:	63 e0       	ldi	r22, 0x03	; 3
 286:	41 df       	rcall	.-382    	; 0x10a <GetBit>
 288:	88 23       	and	r24, r24
 28a:	19 f0       	breq	.+6      	; 0x292 <Tick+0x14c>
		{
			state = Locked;
 28c:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <state>
 290:	04 c0       	rjmp	.+8      	; 0x29a <Tick+0x154>
		}
		else 
		{
			state = PA2_rlsd;
 292:	82 e0       	ldi	r24, 0x02	; 2
 294:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <state>
		}
		break;
 298:	0e c0       	rjmp	.+28     	; 0x2b6 <Tick+0x170>
 29a:	0d c0       	rjmp	.+26     	; 0x2b6 <Tick+0x170>
		
		case Unlocked:
		if(GetBit(A, 7))
 29c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <A>
 2a0:	67 e0       	ldi	r22, 0x07	; 7
 2a2:	33 df       	rcall	.-410    	; 0x10a <GetBit>
 2a4:	88 23       	and	r24, r24
 2a6:	19 f0       	breq	.+6      	; 0x2ae <Tick+0x168>
 2a8:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <state>
		{
			state = Locked;
 2ac:	03 c0       	rjmp	.+6      	; 0x2b4 <Tick+0x16e>
		}
		else
		{
			state = Unlocked;
		}
		break;
 2ae:	83 e0       	ldi	r24, 0x03	; 3
		{
			state = Locked;
		}
		else
		{
			state = Unlocked;
 2b0:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <state>
 2b4:	00 00       	nop
		}
		break;
 2b6:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <state>
		
		default:
		break;
	}
	switch (state) { //State Actions
 2ba:	88 2f       	mov	r24, r24
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	81 30       	cpi	r24, 0x01	; 1
 2c0:	91 05       	cpc	r25, r1
 2c2:	19 f1       	breq	.+70     	; 0x30a <Tick+0x1c4>
 2c4:	82 30       	cpi	r24, 0x02	; 2
 2c6:	91 05       	cpc	r25, r1
 2c8:	1c f4       	brge	.+6      	; 0x2d0 <Tick+0x18a>
 2ca:	89 2b       	or	r24, r25
 2cc:	41 f0       	breq	.+16     	; 0x2de <Tick+0x198>
		tmpB = SetBit(tmpB, 0, 1);
		tmpC = SetBit(tmpC, 0, 1);
		tmpC = SetBit(tmpC, 1, 1);
		break;
		default:
		break;
 2ce:	5f c0       	rjmp	.+190    	; 0x38e <Tick+0x248>
		break;
		
		default:
		break;
	}
	switch (state) { //State Actions
 2d0:	82 30       	cpi	r24, 0x02	; 2
 2d2:	91 05       	cpc	r25, r1
 2d4:	81 f1       	breq	.+96     	; 0x336 <Tick+0x1f0>
 2d6:	03 97       	sbiw	r24, 0x03	; 3
 2d8:	09 f4       	brne	.+2      	; 0x2dc <Tick+0x196>
		tmpB = SetBit(tmpB, 0, 1);
		tmpC = SetBit(tmpC, 0, 1);
		tmpC = SetBit(tmpC, 1, 1);
		break;
		default:
		break;
 2da:	43 c0       	rjmp	.+134    	; 0x362 <Tick+0x21c>
		default:
		break;
	}
	switch (state) { //State Actions
		case Locked: // initial state, Locked
		tmpB = SetBit(tmpB, 0, 0);
 2dc:	58 c0       	rjmp	.+176    	; 0x38e <Tick+0x248>
 2de:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 2e2:	40 e0       	ldi	r20, 0x00	; 0
 2e4:	60 e0       	ldi	r22, 0x00	; 0
 2e6:	e3 de       	rcall	.-570    	; 0xae <SetBit>
 2e8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		tmpC = SetBit(tmpC, 0, 0);
 2ec:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tmpC>
 2f0:	40 e0       	ldi	r20, 0x00	; 0
 2f2:	60 e0       	ldi	r22, 0x00	; 0
 2f4:	dc de       	rcall	.-584    	; 0xae <SetBit>
 2f6:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tmpC>
		tmpC = SetBit(tmpC, 1, 0);
 2fa:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tmpC>
 2fe:	40 e0       	ldi	r20, 0x00	; 0
 300:	61 e0       	ldi	r22, 0x01	; 1
 302:	d5 de       	rcall	.-598    	; 0xae <SetBit>
 304:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tmpC>
		break;
		case PA2_prsd: // Pressing #
		tmpB = SetBit(tmpB, 0, 0);
 308:	42 c0       	rjmp	.+132    	; 0x38e <Tick+0x248>
 30a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 30e:	40 e0       	ldi	r20, 0x00	; 0
 310:	60 e0       	ldi	r22, 0x00	; 0
 312:	cd de       	rcall	.-614    	; 0xae <SetBit>
 314:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		tmpC = SetBit(tmpC, 0, 1);
 318:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tmpC>
 31c:	41 e0       	ldi	r20, 0x01	; 1
 31e:	60 e0       	ldi	r22, 0x00	; 0
 320:	c6 de       	rcall	.-628    	; 0xae <SetBit>
 322:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tmpC>
		tmpC = SetBit(tmpC, 1, 0);
 326:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tmpC>
 32a:	40 e0       	ldi	r20, 0x00	; 0
 32c:	61 e0       	ldi	r22, 0x01	; 1
 32e:	bf de       	rcall	.-642    	; 0xae <SetBit>
 330:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tmpC>
		
		break;
		case PA2_rlsd: // # released
		tmpB = SetBit(tmpB, 0, 0);
 334:	2c c0       	rjmp	.+88     	; 0x38e <Tick+0x248>
 336:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 33a:	40 e0       	ldi	r20, 0x00	; 0
 33c:	60 e0       	ldi	r22, 0x00	; 0
 33e:	b7 de       	rcall	.-658    	; 0xae <SetBit>
 340:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		tmpC = SetBit(tmpC, 0, 0);
 344:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tmpC>
 348:	40 e0       	ldi	r20, 0x00	; 0
 34a:	60 e0       	ldi	r22, 0x00	; 0
 34c:	b0 de       	rcall	.-672    	; 0xae <SetBit>
 34e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tmpC>
		tmpC = SetBit(tmpC, 1, 1);
 352:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tmpC>
 356:	41 e0       	ldi	r20, 0x01	; 1
 358:	61 e0       	ldi	r22, 0x01	; 1
 35a:	a9 de       	rcall	.-686    	; 0xae <SetBit>
 35c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tmpC>
		break;
		case Unlocked: // Unlocked PB0 = 0x01
		tmpB = SetBit(tmpB, 0, 1);
 360:	16 c0       	rjmp	.+44     	; 0x38e <Tick+0x248>
 362:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 366:	41 e0       	ldi	r20, 0x01	; 1
 368:	60 e0       	ldi	r22, 0x00	; 0
 36a:	a1 de       	rcall	.-702    	; 0xae <SetBit>
 36c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		tmpC = SetBit(tmpC, 0, 1);
 370:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tmpC>
 374:	41 e0       	ldi	r20, 0x01	; 1
 376:	60 e0       	ldi	r22, 0x00	; 0
 378:	9a de       	rcall	.-716    	; 0xae <SetBit>
 37a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tmpC>
 37e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <tmpC>
		tmpC = SetBit(tmpC, 1, 1);
 382:	41 e0       	ldi	r20, 0x01	; 1
 384:	61 e0       	ldi	r22, 0x01	; 1
 386:	93 de       	rcall	.-730    	; 0xae <SetBit>
 388:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tmpC>
 38c:	00 00       	nop
 38e:	00 00       	nop
		break;
 390:	df 91       	pop	r29
		default:
		break;
	}
}
 392:	cf 91       	pop	r28
 394:	08 95       	ret

00000396 <main>:
 396:	cf 93       	push	r28
 398:	df 93       	push	r29

int main()
{
 39a:	cd b7       	in	r28, 0x3d	; 61
 39c:	de b7       	in	r29, 0x3e	; 62
	state = Locked; // initial state, Locked
 39e:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <state>
	DDRA = 0x00; PORTA = 0xFF; // Configure port A's 8 pins as input
 3a2:	81 e2       	ldi	r24, 0x21	; 33
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	fc 01       	movw	r30, r24
 3a8:	10 82       	st	Z, r1
 3aa:	82 e2       	ldi	r24, 0x22	; 34
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	2f ef       	ldi	r18, 0xFF	; 255
 3b0:	fc 01       	movw	r30, r24
 3b2:	20 83       	st	Z, r18
	DDRB = 0xFF; PORTB = 0x00; // Configure port B's 8 pins as outputs
 3b4:	84 e2       	ldi	r24, 0x24	; 36
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	2f ef       	ldi	r18, 0xFF	; 255
 3ba:	fc 01       	movw	r30, r24
 3bc:	20 83       	st	Z, r18
 3be:	85 e2       	ldi	r24, 0x25	; 37
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	fc 01       	movw	r30, r24
 3c4:	10 82       	st	Z, r1
	DDRC = 0xFF; PORTC = 0x00;
 3c6:	87 e2       	ldi	r24, 0x27	; 39
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	2f ef       	ldi	r18, 0xFF	; 255
 3cc:	fc 01       	movw	r30, r24
 3ce:	20 83       	st	Z, r18
 3d0:	88 e2       	ldi	r24, 0x28	; 40
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	fc 01       	movw	r30, r24
 3d6:	10 82       	st	Z, r1

	while(1)
	{	A = PINA;
 3d8:	80 e2       	ldi	r24, 0x20	; 32
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	fc 01       	movw	r30, r24
 3de:	80 81       	ld	r24, Z
 3e0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <A>
		Tick();
 3e4:	b0 de       	rcall	.-672    	; 0x146 <Tick>
		// 3) write results to port
		PORTB = tmpB;
 3e6:	85 e2       	ldi	r24, 0x25	; 37
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
 3ee:	fc 01       	movw	r30, r24
 3f0:	20 83       	st	Z, r18
		PORTC = tmpC;
 3f2:	88 e2       	ldi	r24, 0x28	; 40
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <tmpC>
 3fa:	fc 01       	movw	r30, r24
 3fc:	20 83       	st	Z, r18
	}
 3fe:	ec cf       	rjmp	.-40     	; 0x3d8 <main+0x42>

00000400 <_exit>:
 400:	f8 94       	cli

00000402 <__stop_program>:
 402:	ff cf       	rjmp	.-2      	; 0x402 <__stop_program>
